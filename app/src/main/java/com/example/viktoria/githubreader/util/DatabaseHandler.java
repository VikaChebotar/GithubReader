package com.example.viktoria.githubreader.util;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import com.example.viktoria.githubreader.R;
import com.example.viktoria.githubreader.model.User;
import com.example.viktoria.githubreader.view.MainActivity;

/**
 * The class that creates db and table to save user data.
 */
public class DatabaseHandler extends SQLiteOpenHelper {
    private static DatabaseHandler databaseHandler;
    private static final int DATABASE_VERSION = 1;
    private static final String DATABASE_NAME = "githubReader";
    private static final String TABLE_USERS = "users"; //name of colums in table
    private static final String KEY_ID = "id"; //autogenerated
    private static final String KEY_USERNAME = "username";
    private static final String KEY_FOLLOWERS = "followers";
    private static final String KEY_FOLLOWING = "following";
private Context context;
    /**
     * Constructor should be private to prevent direct instantiation.
     * make call to static method "getInstance()" instead.
     */
    private DatabaseHandler(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
        this.context = context;
    }

    //Singleton pattern
    public static DatabaseHandler getInstance(Context context) {
        // Use the application context, which will ensure that you
        // don't accidentally leak an Activity's context.
        if (databaseHandler == null) {
            databaseHandler = new DatabaseHandler(context.getApplicationContext());
        }
        return databaseHandler;
    }

    // create table
    @Override
    public void onCreate(SQLiteDatabase db) {
        String CREATE_USERS_TABLE = "CREATE TABLE " + TABLE_USERS + "("
                + KEY_ID + " INTEGER PRIMARY KEY," + KEY_USERNAME + " TEXT,"
                + KEY_FOLLOWERS + " INTEGER," + KEY_FOLLOWING
                + " INTEGER" + ")";
        db.execSQL(CREATE_USERS_TABLE);
    }

    // Upgrading database
    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        // Drop older table if existed
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_USERS);

        // Create tables again
        onCreate(db);
    }

    /**
     * Insert in TABLE_USERS new row with user data
     * @param u user object to be inserted
     */
    public void addUsers(User u) {
        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues values = new ContentValues();
        values.put(KEY_USERNAME, u.getLogin());
        values.put(KEY_FOLLOWERS, u.getFollowers());
        values.put(KEY_FOLLOWING, u.getFollowing());

        // Inserting Row
        int id = (int) db.insert(TABLE_USERS, null, values);
        Log.d(MainActivity.TAG,context.getString(R.string.sqlite_user_added) +id);
        db.close(); // Closing database connection
    }

    /**
     * Check if user with same username exists.
     * @param u User to be checked
     * @return true if exists, false if no
     */
    public boolean checkIfExists(User u) {
        StringBuilder countQuery = new StringBuilder("SELECT  * FROM ");
        countQuery.append(TABLE_USERS).append(" WHERE ").append(KEY_USERNAME).append("=?");
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(countQuery.toString(), new String[]{u.getLogin()});
        int count = cursor.getCount();
        cursor.close();
        if (count > 0) {
            return true;
        } else {
            return false;
        }
    }
}
